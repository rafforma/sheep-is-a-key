;
; File generated by cc65 v 2.16 - Git c99a361
;
	.fopt		compiler,"cc65 v 2.16 - Git c99a361"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "sheep.c", 19933, 1553193358
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/stdlib.h", 5748, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/time.h", 5672, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/conio.h", 9002, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/stdarg.h", 2913, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/cbm.h", 11284, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/stddef.h", 3057, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/c64.h", 6940, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/_vic2.h", 10835, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/_sid.h", 3626, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/_6526.h", 3962, 1510740213
	.dbg		file, "D:\Program Files (x86)\GnuWin32\cc65\include/cbm_filetype.h", 4949, 1510740213
	.dbg		file, "jumptable.c", 699, 1499793351
	.dbg		file, "level.h", 2999, 1499443911
	.forceimport	__STARTUP__
	.dbg		sym, "clrscr", "00", extern, "_clrscr"
	.dbg		sym, "gotoxy", "00", extern, "_gotoxy"
	.dbg		sym, "cprintf", "00", extern, "_cprintf"
	.dbg		sym, "textcolor", "00", extern, "_textcolor"
	.dbg		sym, "flip_h", "00", extern, "_flip_h"
	.dbg		sym, "init_raster", "00", extern, "_init_raster"
	.dbg		sym, "musicid", "00", extern, "_musicid"
	.dbg		sym, "rastermode", "00", extern, "_rastermode"
	.dbg		sym, "x0", "00", extern, "_x0"
	.dbg		sym, "x1", "00", extern, "_x1"
	.dbg		sym, "frame_ready", "00", extern, "_frame_ready"
	.dbg		sym, "drawlevel", "00", extern, "_drawlevel"
	.dbg		sym, "waitjingle", "00", extern, "_waitjingle"
	.dbg		sym, "waitjinglewithkey", "00", extern, "_waitjinglewithkey"
	.export		_waitvsync
	.import		_clrscr
	.import		_gotoxy
	.import		_cprintf
	.import		_textcolor
	.export		_jtab
	.export		_jtablong
	.export		_level_1
	.export		_level_2
	.export		_level_3
	.export		_level_4
	.export		_level_5
	.export		_level_6
	.export		_level_7
	.export		_level_8
	.export		_level_9
	.export		_level_10
	.export		_level_11
	.export		_level_12
	.export		_level_13
	.export		_level_14
	.export		_level_15
	.export		_levels
	.import		_flip_h
	.import		_init_raster
	.import		_musicid
	.import		_rastermode
	.import		_x0
	.import		_x1
	.import		_frame_ready
	.import		_drawlevel
	.import		_waitjingle
	.import		_waitjinglewithkey
	.export		_db_cell_color
	.export		_db_ch
	.export		_db_w
	.export		_db_h
	.export		_db_color
	.export		_db_y
	.export		_db_x
	.export		_drawbox
	.export		_anim
	.export		_frame
	.export		_jump
	.export		_floor
	.export		_newfloor
	.export		_move_player
	.export		_draw_level
	.export		_check_collision
	.export		_screen_on
	.export		_screen_off
	.export		_show_title
	.export		_main

.segment	"DATA"

_jtab:
	.word	$FEC0
	.word	$FECB
	.word	$FED7
	.word	$FEE3
	.word	$FEEF
	.word	$FEFC
	.word	$FF09
	.word	$FF16
	.word	$FF24
	.word	$FF31
	.word	$FF40
	.word	$FF4E
	.word	$FF5D
	.word	$FF6C
	.word	$FF7B
	.word	$FF8A
	.word	$FF9A
	.word	$FFA9
	.word	$FFB9
	.word	$FFC9
	.word	$FFD9
	.word	$FFE9
	.word	$FFF9
	.word	$0007
	.word	$0017
	.word	$0027
	.word	$0037
	.word	$0047
	.word	$0057
	.word	$0066
	.word	$0076
	.word	$0085
	.word	$0094
	.word	$00A3
	.word	$00B2
	.word	$00C0
	.word	$00CF
	.word	$00DC
	.word	$00EA
	.word	$00F7
	.word	$0104
	.word	$0111
	.word	$011D
	.word	$0129
	.word	$0135
	.word	$0140
_jtablong:
	.word	$FEC0
	.word	$FEC9
	.word	$FED1
	.word	$FEDA
	.word	$FEE3
	.word	$FEEC
	.word	$FEF5
	.word	$FEFF
	.word	$FF09
	.word	$FF13
	.word	$FF1D
	.word	$FF27
	.word	$FF31
	.word	$FF3C
	.word	$FF47
	.word	$FF52
	.word	$FF5D
	.word	$FF68
	.word	$FF73
	.word	$FF7F
	.word	$FF8A
	.word	$FF96
	.word	$FFA1
	.word	$FFAD
	.word	$FFB9
	.word	$FFC5
	.word	$FFD1
	.word	$FFDD
	.word	$FFE9
	.word	$FFF5
	.word	$0000
	.word	$000B
	.word	$0017
	.word	$0023
	.word	$002F
	.word	$003B
	.word	$0047
	.word	$0053
	.word	$005F
	.word	$006A
	.word	$0076
	.word	$0081
	.word	$008D
	.word	$0098
	.word	$00A3
	.word	$00AE
	.word	$00B9
	.word	$00C4
	.word	$00CF
	.word	$00D9
	.word	$00E3
	.word	$00ED
	.word	$00F7
	.word	$0101
	.word	$010B
	.word	$0114
	.word	$011D
	.word	$0126
	.word	$012F
	.word	$0137
	.word	$0140
_level_1:
	.word	$0002
	.word	$000C
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$001B
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0008
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0013
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$001F
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0001
	.word	$0009
	.word	$0016
	.word	$0001
	.word	$0002
	.word	$0001
	.word	$001A
	.word	$0016
	.word	$0001
	.word	$0002
	.word	$0003
_level_2:
	.word	$0002
	.word	$0005
	.word	$0006
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$001E
	.word	$0006
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$0011
	.word	$000E
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$001D
	.word	$0016
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$0009
	.word	$0016
	.word	$0002
	.word	$0002
	.word	$0003
_level_3:
	.word	$0002
	.word	$0006
	.word	$0007
	.word	$0002
	.word	$0001
	.word	$0002
	.word	$0011
	.word	$0007
	.word	$0002
	.word	$0001
	.word	$0002
	.word	$001F
	.word	$0007
	.word	$0002
	.word	$0001
	.word	$0002
	.word	$000A
	.word	$000F
	.word	$0002
	.word	$0001
	.word	$0002
	.word	$0018
	.word	$000F
	.word	$0002
	.word	$0001
	.word	$0002
	.word	$0012
	.word	$0017
	.word	$0002
	.word	$0001
	.word	$0003
_level_4:
	.word	$0002
	.word	$0007
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000F
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0018
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0021
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0009
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0013
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$001D
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0003
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000D
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0018
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0022
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0003
_level_5:
	.word	$0002
	.word	$0013
	.word	$0006
	.word	$0001
	.word	$0002
	.word	$0002
	.word	$000C
	.word	$000E
	.word	$0001
	.word	$0002
	.word	$0002
	.word	$0019
	.word	$000E
	.word	$0001
	.word	$0002
	.word	$0002
	.word	$0007
	.word	$0016
	.word	$0001
	.word	$0002
	.word	$0002
	.word	$000C
	.word	$0014
	.word	$000E
	.word	$0001
	.word	$0002
	.word	$0020
	.word	$0016
	.word	$0001
	.word	$0002
	.word	$0003
_level_6:
	.word	$0002
	.word	$0011
	.word	$0006
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$0008
	.word	$000E
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$0011
	.word	$000E
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$001C
	.word	$000E
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$0006
	.word	$0016
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$001F
	.word	$0016
	.word	$0002
	.word	$0002
	.word	$0002
	.word	$000C
	.word	$0014
	.word	$000E
	.word	$0001
	.word	$0003
_level_7:
	.word	$0002
	.word	$0007
	.word	$0007
	.word	$0004
	.word	$0001
	.word	$0002
	.word	$0012
	.word	$0007
	.word	$0004
	.word	$0001
	.word	$0002
	.word	$001D
	.word	$0007
	.word	$0004
	.word	$0001
	.word	$0002
	.word	$0013
	.word	$000D
	.word	$0001
	.word	$0003
	.word	$0002
	.word	$0005
	.word	$000F
	.word	$0004
	.word	$0001
	.word	$0002
	.word	$0009
	.word	$0015
	.word	$0001
	.word	$0003
	.word	$0002
	.word	$0015
	.word	$0017
	.word	$0004
	.word	$0001
	.word	$0003
_level_8:
	.word	$0002
	.word	$0007
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000F
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0016
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$001E
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0021
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0019
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0012
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0008
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0005
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000F
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0019
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0023
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0003
_level_9:
	.word	$0002
	.word	$0005
	.word	$0006
	.word	$0003
	.word	$0002
	.word	$0002
	.word	$0011
	.word	$0006
	.word	$0003
	.word	$0002
	.word	$0002
	.word	$001E
	.word	$0006
	.word	$0003
	.word	$0002
	.word	$0002
	.word	$0017
	.word	$000E
	.word	$0003
	.word	$0002
	.word	$0002
	.word	$000B
	.word	$000E
	.word	$0003
	.word	$0002
	.word	$0002
	.word	$0012
	.word	$0016
	.word	$0003
	.word	$0002
	.word	$0003
_level_10:
	.word	$0002
	.word	$0005
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0006
	.word	$0006
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0011
	.word	$0006
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0012
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$001A
	.word	$0006
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$001B
	.word	$0007
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000B
	.word	$000E
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000A
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000C
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0016
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0017
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0017
	.word	$000E
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000B
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000C
	.word	$0016
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$000C
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0022
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$001D
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0002
	.word	$0013
	.word	$0017
	.word	$0001
	.word	$0001
	.word	$0003
_level_11:
	.word	$0003
_level_12:
	.word	$0003
_level_13:
	.word	$0003
_level_14:
	.word	$0003
_level_15:
	.word	$0003
_levels:
	.addr	_level_1
	.addr	_level_2
	.addr	_level_3
	.addr	_level_4
	.addr	_level_5
	.addr	_level_6
	.addr	_level_7
	.addr	_level_8
	.addr	_level_9
	.addr	_level_10
	.word	$0000
_color_lookup:
	.word	$D800
	.word	$D828
	.word	$D850
	.word	$D878
	.word	$D8A0
	.word	$D8C8
	.word	$D8F0
	.word	$D918
	.word	$D940
	.word	$D968
	.word	$D990
	.word	$D9B8
	.word	$D9E0
	.word	$DA08
	.word	$DA30
	.word	$DA58
	.word	$DA80
	.word	$DAA8
	.word	$DAD0
	.word	$DAF8
	.word	$DB20
	.word	$DB48
	.word	$DB70
	.word	$DB98
	.word	$DBC0
_lookup:
	.word	$0400
	.word	$0428
	.word	$0450
	.word	$0478
	.word	$04A0
	.word	$04C8
	.word	$04F0
	.word	$0518
	.word	$0540
	.word	$0568
	.word	$0590
	.word	$05B8
	.word	$05E0
	.word	$0608
	.word	$0630
	.word	$0658
	.word	$0680
	.word	$06A8
	.word	$06D0
	.word	$06F8
	.word	$0720
	.word	$0748
	.word	$0770
	.word	$0798
	.word	$07C0
_db_cell_color:
	.word	$0001
_db_ch:
	.word	$0000
_db_w:
	.word	$0000
_db_h:
	.word	$0000
_db_color:
	.word	$0000
_db_y:
	.word	$0000
_db_x:
	.word	$0000
_anim:
	.word	$0000
_frame:
	.word	$0001
_jump:
	.word	$0000
_floor:
	.word	$0000
_newfloor:
	.word	$0000
_bits:
	.word	$0001
	.word	$0002
	.word	$0004
	.word	$0008
	.word	$0010
	.word	$0020
	.word	$0040
	.word	$0080
_cycle:
	.word	$0000
	.word	$000C
	.word	$000F
	.word	$0001
	.word	$0001
	.word	$000F
	.word	$000C
	.word	$0000

.segment	"RODATA"

_data:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$15
	.byte	$7F
	.byte	$E0
	.byte	$79
	.byte	$7F
	.byte	$F8
	.byte	$5D
	.byte	$FF
	.byte	$FE
	.byte	$75
	.byte	$FF
	.byte	$FB
	.byte	$55
	.byte	$FF
	.byte	$FF
	.byte	$56
	.byte	$FF
	.byte	$FA
	.byte	$56
	.byte	$FF
	.byte	$EC
	.byte	$57
	.byte	$FF
	.byte	$F8
	.byte	$1A
	.byte	$FF
	.byte	$EC
	.byte	$0B
	.byte	$BE
	.byte	$B8
	.byte	$0A
	.byte	$AB
	.byte	$A8
	.byte	$16
	.byte	$AE
	.byte	$A4
	.byte	$51
	.byte	$6A
	.byte	$A4
	.byte	$45
	.byte	$00
	.byte	$41
	.byte	$44
	.byte	$00
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$15
	.byte	$7F
	.byte	$E0
	.byte	$79
	.byte	$7F
	.byte	$F8
	.byte	$5D
	.byte	$FF
	.byte	$FE
	.byte	$75
	.byte	$FF
	.byte	$FB
	.byte	$55
	.byte	$FF
	.byte	$FF
	.byte	$56
	.byte	$FF
	.byte	$FA
	.byte	$56
	.byte	$FF
	.byte	$EC
	.byte	$57
	.byte	$FF
	.byte	$F8
	.byte	$1A
	.byte	$FF
	.byte	$EC
	.byte	$0B
	.byte	$BE
	.byte	$B8
	.byte	$0A
	.byte	$AB
	.byte	$A8
	.byte	$06
	.byte	$AE
	.byte	$A4
	.byte	$04
	.byte	$6A
	.byte	$A4
	.byte	$10
	.byte	$40
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$00
	.byte	$40
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$15
	.byte	$7F
	.byte	$E0
	.byte	$79
	.byte	$7F
	.byte	$F8
	.byte	$5D
	.byte	$FF
	.byte	$FE
	.byte	$75
	.byte	$FF
	.byte	$FB
	.byte	$55
	.byte	$FF
	.byte	$FF
	.byte	$56
	.byte	$FF
	.byte	$FA
	.byte	$56
	.byte	$FF
	.byte	$EC
	.byte	$57
	.byte	$FF
	.byte	$F8
	.byte	$1A
	.byte	$FF
	.byte	$EC
	.byte	$0B
	.byte	$BE
	.byte	$B8
	.byte	$0A
	.byte	$AB
	.byte	$A8
	.byte	$06
	.byte	$AE
	.byte	$A4
	.byte	$04
	.byte	$6A
	.byte	$A4
	.byte	$04
	.byte	$40
	.byte	$14
	.byte	$01
	.byte	$40
	.byte	$54
	.byte	$01
	.byte	$10
	.byte	$50
	.byte	$01
	.byte	$10
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$8C
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$15
	.byte	$7F
	.byte	$E0
	.byte	$79
	.byte	$7F
	.byte	$F8
	.byte	$5D
	.byte	$FF
	.byte	$FE
	.byte	$75
	.byte	$FF
	.byte	$FB
	.byte	$55
	.byte	$FF
	.byte	$FF
	.byte	$56
	.byte	$FF
	.byte	$FA
	.byte	$56
	.byte	$FF
	.byte	$EC
	.byte	$57
	.byte	$FF
	.byte	$F8
	.byte	$1A
	.byte	$FF
	.byte	$EC
	.byte	$0B
	.byte	$BE
	.byte	$B8
	.byte	$0A
	.byte	$AB
	.byte	$A8
	.byte	$06
	.byte	$AE
	.byte	$A4
	.byte	$04
	.byte	$6A
	.byte	$A4
	.byte	$01
	.byte	$40
	.byte	$14
	.byte	$01
	.byte	$14
	.byte	$50
	.byte	$00
	.byte	$51
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$00
_sprite_title:
	.byte	$01
	.byte	$54
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$00
	.byte	$1F
	.byte	$0A
	.byte	$C0
	.byte	$1E
	.byte	$03
	.byte	$80
	.byte	$18
	.byte	$0E
	.byte	$C0
	.byte	$1C
	.byte	$0A
	.byte	$80
	.byte	$78
	.byte	$0A
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$78
	.byte	$01
	.byte	$43
	.byte	$7E
	.byte	$17
	.byte	$D3
	.byte	$3B
	.byte	$EA
	.byte	$D3
	.byte	$2A
	.byte	$82
	.byte	$92
	.byte	$0E
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$10
	.byte	$00
	.byte	$A2
	.byte	$68
	.byte	$00
	.byte	$E3
	.byte	$68
	.byte	$03
	.byte	$A2
	.byte	$BA
	.byte	$03
	.byte	$82
	.byte	$2A
	.byte	$BE
	.byte	$82
	.byte	$0A
	.byte	$AA
	.byte	$02
	.byte	$00
	.byte	$A0
	.byte	$02
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
	.byte	$03
	.byte	$EB
	.byte	$40
	.byte	$06
	.byte	$C2
	.byte	$40
	.byte	$0B
	.byte	$82
	.byte	$C1
	.byte	$0E
	.byte	$00
	.byte	$C1
	.byte	$0B
	.byte	$00
	.byte	$C3
	.byte	$4A
	.byte	$00
	.byte	$83
	.byte	$CE
	.byte	$00
	.byte	$C2
	.byte	$CA
	.byte	$30
	.byte	$83
	.byte	$8A
	.byte	$E0
	.byte	$CA
	.byte	$CA
	.byte	$A0
	.byte	$AA
	.byte	$8E
	.byte	$80
	.byte	$A3
	.byte	$8A
	.byte	$00
	.byte	$82
	.byte	$8A
	.byte	$00
	.byte	$82
	.byte	$8A
	.byte	$03
	.byte	$82
	.byte	$CA
	.byte	$82
	.byte	$82
	.byte	$8A
	.byte	$83
	.byte	$82
	.byte	$8A
	.byte	$AE
	.byte	$00
	.byte	$82
	.byte	$AA
	.byte	$00
	.byte	$82
	.byte	$A8
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$C0
	.byte	$00
	.byte	$1E
	.byte	$F0
	.byte	$00
	.byte	$5C
	.byte	$F0
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$2C
	.byte	$80
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$50
	.byte	$2C
	.byte	$01
	.byte	$7C
	.byte	$38
	.byte	$01
	.byte	$EF
	.byte	$2A
	.byte	$06
	.byte	$8B
	.byte	$3A
	.byte	$06
	.byte	$0E
	.byte	$2A
	.byte	$0E
	.byte	$03
	.byte	$28
	.byte	$0A
	.byte	$00
	.byte	$38
	.byte	$CE
	.byte	$30
	.byte	$28
	.byte	$CA
	.byte	$E0
	.byte	$28
	.byte	$8A
	.byte	$80
	.byte	$28
	.byte	$8E
	.byte	$03
	.byte	$28
	.byte	$0A
	.byte	$0E
	.byte	$28
	.byte	$0A
	.byte	$BB
	.byte	$28
	.byte	$02
	.byte	$A8
	.byte	$2A
	.byte	$85
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$0C
	.byte	$0A
	.byte	$00
	.byte	$18
	.byte	$0B
	.byte	$00
	.byte	$38
	.byte	$3A
	.byte	$00
	.byte	$20
	.byte	$3A
	.byte	$00
	.byte	$01
	.byte	$E8
	.byte	$00
	.byte	$1F
	.byte	$A8
	.byte	$00
	.byte	$7E
	.byte	$A0
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$F4
	.byte	$00
	.byte	$1A
	.byte	$2B
	.byte	$00
	.byte	$1C
	.byte	$0E
	.byte	$00
	.byte	$28
	.byte	$0A
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$F0
	.byte	$00
	.byte	$0A
	.byte	$EC
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$30
	.byte	$0E
	.byte	$00
	.byte	$38
	.byte	$0B
	.byte	$00
	.byte	$2C
	.byte	$2A
	.byte	$00
	.byte	$0B
	.byte	$AA
	.byte	$00
	.byte	$02
	.byte	$A8
	.byte	$00
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$15
	.byte	$00
	.byte	$3B
	.byte	$1F
	.byte	$00
	.byte	$2B
	.byte	$63
	.byte	$80
	.byte	$28
	.byte	$72
	.byte	$80
	.byte	$28
	.byte	$AB
	.byte	$80
	.byte	$28
	.byte	$EB
	.byte	$80
	.byte	$28
	.byte	$A2
	.byte	$80
	.byte	$28
	.byte	$A3
	.byte	$80
	.byte	$28
	.byte	$E2
	.byte	$80
	.byte	$28
	.byte	$82
	.byte	$00
	.byte	$20
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$80
	.byte	$05
	.byte	$03
	.byte	$80
	.byte	$17
	.byte	$C2
	.byte	$00
	.byte	$1E
	.byte	$F3
	.byte	$80
	.byte	$68
	.byte	$B2
	.byte	$A0
	.byte	$E0
	.byte	$E3
	.byte	$A0
	.byte	$E0
	.byte	$32
	.byte	$A8
	.byte	$A0
	.byte	$00
	.byte	$E8
	.byte	$E3
	.byte	$00
	.byte	$38
	.byte	$AE
	.byte	$00
	.byte	$38
	.byte	$A8
	.byte	$00
	.byte	$38
	.byte	$E0
	.byte	$33
	.byte	$28
	.byte	$A0
	.byte	$E3
	.byte	$28
	.byte	$AB
	.byte	$B2
	.byte	$28
	.byte	$2A
	.byte	$80
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$C0
	.byte	$40
	.byte	$00
	.byte	$81
	.byte	$C0
	.byte	$00
	.byte	$C3
	.byte	$80
	.byte	$00
	.byte	$82
	.byte	$C0
	.byte	$00
	.byte	$8E
	.byte	$C0
	.byte	$00
	.byte	$8A
	.byte	$80
	.byte	$00
	.byte	$BA
	.byte	$C0
	.byte	$00
	.byte	$AA
	.byte	$80
	.byte	$00
	.byte	$A2
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$C0
	.byte	$00
	.byte	$02
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$80
	.byte	$00
	.byte	$0E
	.byte	$80
	.byte	$00
	.byte	$CA
	.byte	$80
	.byte	$00
	.byte	$BA
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$85
	.byte	$00
_charset:
	.word	$0000
	.word	$003C
	.word	$007C
	.word	$004C
	.word	$005C
	.word	$0040
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$004C
	.word	$0000
	.word	$0000
	.word	$0078
	.word	$0078
	.word	$0048
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0078
	.word	$0058
	.word	$0040
	.word	$0078
	.word	$0000
	.word	$0000
	.word	$0070
	.word	$0078
	.word	$005C
	.word	$004C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$0040
	.word	$0070
	.word	$0040
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$0040
	.word	$0070
	.word	$0040
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$0040
	.word	$005C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$007C
	.word	$004C
	.word	$004C
	.word	$0000
	.word	$0000
	.word	$0030
	.word	$0000
	.word	$0030
	.word	$0030
	.word	$0030
	.word	$0030
	.word	$0000
	.word	$0000
	.word	$003C
	.word	$003C
	.word	$0004
	.word	$0004
	.word	$0004
	.word	$003C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$0078
	.word	$004C
	.word	$004C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0060
	.word	$0060
	.word	$0060
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$006C
	.word	$007C
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$006C
	.word	$006C
	.word	$005C
	.word	$004C
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$0040
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$004C
	.word	$004C
	.word	$005C
	.word	$0074
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$004C
	.word	$0078
	.word	$004C
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$0040
	.word	$007C
	.word	$000C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$007C
	.word	$0010
	.word	$0010
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$0030
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$004C
	.word	$007C
	.word	$006C
	.word	$0000
	.word	$0000
	.word	$0066
	.word	$0066
	.word	$0018
	.word	$0018
	.word	$0066
	.word	$0066
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$007C
	.word	$000C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$007E
	.word	$007E
	.word	$0006
	.word	$0018
	.word	$0060
	.word	$007E
	.word	$0000
	.word	$0000
	.word	$003C
	.word	$003C
	.word	$0020
	.word	$0020
	.word	$0020
	.word	$003C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0018
	.word	$0018
	.word	$0000
	.word	$0000
	.word	$003C
	.word	$003C
	.word	$0004
	.word	$0004
	.word	$0004
	.word	$003C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0018
	.word	$0018
	.word	$0008
	.word	$0010
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$003C
	.word	$003C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$004C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0018
	.word	$0038
	.word	$0018
	.word	$003C
	.word	$0000
	.word	$0000
	.word	$0078
	.word	$007C
	.word	$000C
	.word	$007C
	.word	$0040
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0078
	.word	$007C
	.word	$000C
	.word	$001C
	.word	$000C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$004C
	.word	$004C
	.word	$007C
	.word	$000C
	.word	$0000
	.word	$0000
	.word	$003C
	.word	$007C
	.word	$0040
	.word	$007C
	.word	$000C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$003C
	.word	$007C
	.word	$0040
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$007C
	.word	$000C
	.word	$001C
	.word	$000C
	.word	$0000
	.word	$0000
	.word	$0078
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$0000
	.word	$0000
	.word	$0078
	.word	$007C
	.word	$004C
	.word	$007C
	.word	$000C
	.word	$007C
	.word	$0000
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$000C
	.word	$00CC
	.word	$003F
	.word	$00CF
	.word	$003F
	.word	$003F
	.word	$00F3
	.word	$0004
	.word	$0000
	.word	$0030
	.word	$00C3
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00C3
	.word	$000C
	.word	$0030
	.word	$0033
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00F3
	.word	$00C4
	.word	$0000
	.word	$00CC
	.word	$0030
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FC
	.word	$000F
	.word	$0030
	.word	$000C
	.word	$00CC
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00CF
	.word	$0013
	.word	$0033
	.word	$000C
	.word	$0033
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$00FC
	.word	$0031
	.word	$0000
	.word	$00C3
	.word	$0033
	.word	$00FF
	.word	$00FF
	.word	$00FF
	.word	$003C
	.word	$0000
	.word	$0000
	.word	$000C
	.word	$0033
	.word	$00FC
	.word	$00FF
	.word	$00FF
	.word	$00CC
	.word	$0013
	.word	$0005
	.word	$0006
	.word	$0000
	.word	$0005
	.word	$0009
	.word	$0000
	.word	$0000
	.word	$0001
	.word	$0014
	.word	$0054
	.word	$0058
	.word	$0000
	.word	$0010
	.word	$0011
	.word	$0001
	.word	$0000
	.word	$0015
	.word	$0056
	.word	$0040
	.word	$0041
	.word	$0001
	.word	$0050
	.word	$0061
	.word	$0001
	.word	$0010
	.word	$0015
	.word	$0014
	.word	$0000
	.word	$0046
	.word	$0005
	.word	$0040
	.word	$0080
	.word	$0010
	.word	$0014
	.word	$0014
	.word	$0018
	.word	$0000
	.word	$0005
	.word	$0046
	.word	$0040
	.word	$0045
	.word	$0055
	.word	$0000
	.word	$0040
	.word	$0004
	.word	$0014
	.word	$0018
	.word	$0000
	.word	$0015
	.word	$0015
	.word	$0000
	.word	$0050
	.word	$0061
	.word	$0000
	.word	$0018
	.word	$0000
	.word	$0010
	.word	$0014
	.word	$0014
	.word	$0000
	.word	$0050
	.word	$0060
	.word	$0000
	.word	$0040
	.word	$0025
	.word	$0029
	.word	$00E5
	.word	$00E9
	.word	$00E5
	.word	$00FF
	.word	$00FF
	.word	$00C3
	.word	$0004
	.word	$0008
	.word	$0025
	.word	$0029
	.word	$0025
	.word	$0029
	.word	$0025
	.word	$0029
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
L0B77:
	.byte	$43,$4F,$4E,$47,$52,$41,$54,$55,$4C,$41,$54,$49,$4F,$4E,$20,$59
	.byte	$4F,$55,$20,$44,$49,$44,$20,$49,$54,$21,$21,$21,$20,$00
L0B25:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$59,$4F,$55,$20,$4C,$4F
	.byte	$53,$45,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
L0955:
	.byte	$2D,$20,$46,$49,$52,$45,$20,$49,$4E,$20,$50,$4F,$52,$54,$20,$32
	.byte	$20,$54,$4F,$20,$53,$54,$41,$52,$54,$20,$2D,$00
L0931	:=	L0955+0
L0B15:
	.byte	$4C,$45,$56,$45,$4C,$20,$25,$44,$20,$4F,$46,$20,$31,$30,$20,$4C
	.byte	$49,$56,$45,$53,$20,$25,$44,$20,$00
L0B7D:
	.byte	$4F,$4E,$4C,$59,$20,$25,$30,$33,$44,$20,$44,$45,$41,$54,$48,$20
	.byte	$00
L08DD:
	.byte	$52,$41,$46,$46,$41,$45,$4C,$45,$20,$46,$4F,$52,$4D,$41,$54,$4F
	.byte	$00
L08F7:
	.byte	$46,$45,$44,$45,$52,$49,$43,$4F,$20,$53,$45,$53,$4C,$45,$52,$00
L0911:
	.byte	$4D,$49,$43,$48,$41,$45,$4C,$20,$5A,$55,$55,$52,$4D,$41,$4E,$00
L0A87:
	.byte	$4C,$45,$56,$45,$4C,$20,$43,$4F,$4D,$50,$4C,$45,$54,$45,$00
L0921:
	.byte	$5B,$40,$5D,$20,$49,$4E,$20,$32,$30,$31,$37,$00
L08EB:
	.byte	$41,$52,$54,$57,$4F,$52,$4B,$20,$42,$59,$00
L0905:
	.byte	$4D,$55,$53,$49,$43,$20,$42,$59,$00
L08D1:
	.byte	$43,$4F,$44,$45,$20,$42,$59,$00

; ---------------------------------------------------------------
; void __near__ waitvsync (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitvsync: near

	.dbg	func, "waitvsync", "00", extern, "_waitvsync"

.segment	"CODE"

;
; asm ("lda $d012");
;
	.dbg	line, "sheep.c", 397
wait:	lda     $d012
;
; asm ("cmp #$ff");
;
	.dbg	line, "sheep.c", 398
	cmp     #$ff
;
; asm ("jne wait");
;
	.dbg	line, "sheep.c", 399
	jne     wait
;
; }
;
	.dbg	line, "sheep.c", 400
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ drawbox (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawbox: near

	.dbg	func, "drawbox", "00", extern, "_drawbox"

.segment	"DATA"

L0275:
	.word	$0051
	.word	$0050
L0278:
	.word	$0050
	.word	$0050

.segment	"BSS"

L0273:
	.res	2,$00
L0274:
	.res	2,$00
L027B:
	.res	2,$00
L027C:
	.res	2,$00
L027F:
	.res	2,$00
L0282:
	.res	2,$00
L0284:
	.res	2,$00
L0286:
	.res	2,$00

.segment	"CODE"

;
; char *s = (char *) lookup[db_y]+db_x;
;
	.dbg	line, "sheep.c", 206
	lda     _db_y
	ldx     _db_y+1
	jsr     aslax1
	clc
	adc     #<(_lookup)
	tay
	txa
	adc     #>(_lookup)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	lda     _db_x
	ldx     _db_x+1
	jsr     tosaddax
	sta     L027C
	stx     L027C+1
;
; char *c = (char *) color_lookup[db_y]+db_x;
;
	.dbg	line, "sheep.c", 207
	lda     _db_y
	ldx     _db_y+1
	jsr     aslax1
	clc
	adc     #<(_color_lookup)
	tay
	txa
	adc     #>(_color_lookup)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	lda     _db_x
	ldx     _db_x+1
	jsr     tosaddax
	sta     L027F
	stx     L027F+1
;
; int w=db_x+db_w;
;
	.dbg	line, "sheep.c", 208
	lda     _db_x
	ldx     _db_x+1
	jsr     pushax
	lda     _db_w
	ldx     _db_w+1
	jsr     tosaddax
	sta     L0282
	stx     L0282+1
;
; int h=db_y+db_h;
;
	.dbg	line, "sheep.c", 209
	lda     _db_y
	ldx     _db_y+1
	jsr     pushax
	lda     _db_h
	ldx     _db_h+1
	jsr     tosaddax
	sta     L0284
	stx     L0284+1
;
; int dw = 40-db_w;
;
	.dbg	line, "sheep.c", 210
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     _db_w
	ldx     _db_w+1
	jsr     tossubax
	sta     L0286
	stx     L0286+1
;
; if (db_h==1) ptr=b1;
;
	.dbg	line, "sheep.c", 211
	lda     _db_h
	ldx     _db_h+1
	cpx     #$00
	bne     L028A
	cmp     #$01
L028A:	jsr     booleq
	jeq     L0288
	lda     #<(L0278)
	ldx     #>(L0278)
	sta     L027B
	stx     L027B+1
;
; if (db_h==2) ptr = b0;
;
	.dbg	line, "sheep.c", 212
L0288:	lda     _db_h
	ldx     _db_h+1
	cpx     #$00
	bne     L028F
	cmp     #$02
L028F:	jsr     booleq
	jeq     L028D
	lda     #<(L0275)
	ldx     #>(L0275)
	sta     L027B
	stx     L027B+1
;
; db_ch=ptr[0];
;
	.dbg	line, "sheep.c", 214
L028D:	lda     L027B
	ldx     L027B+1
	ldy     #$01
	jsr     ldaxidx
	sta     _db_ch
	stx     _db_ch+1
;
; for (i=db_y;i<h;i++) {
;
	.dbg	line, "sheep.c", 215
	lda     _db_y
	ldx     _db_y+1
	sta     L0273
	stx     L0273+1
L0295:	lda     L0273
	ldx     L0273+1
	jsr     pushax
	lda     L0284
	ldx     L0284+1
	jsr     tosltax
	jne     L0298
	jmp     L0296
;
; for ( j=db_x;j<w;j++) {
;
	.dbg	line, "sheep.c", 216
L0298:	lda     _db_x
	ldx     _db_x+1
	sta     L0274
	stx     L0274+1
L029E:	lda     L0274
	ldx     L0274+1
	jsr     pushax
	lda     L0282
	ldx     L0282+1
	jsr     tosltax
	jne     L02A1
	jmp     L029F
;
; *s=db_ch;
;
	.dbg	line, "sheep.c", 217
L02A1:	lda     L027C
	ldx     L027C+1
	jsr     pushax
	ldx     #$00
	lda     _db_ch
	ldy     #$00
	jsr     staspidx
;
; *c=db_cell_color;
;
	.dbg	line, "sheep.c", 218
	lda     L027F
	ldx     L027F+1
	jsr     pushax
	ldx     #$00
	lda     _db_cell_color
	ldy     #$00
	jsr     staspidx
;
; s++;
;
	.dbg	line, "sheep.c", 219
	lda     L027C
	ldx     L027C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L02AC
	inx
L02AC:	sta     L027C
	stx     L027C+1
	lda     regsave
	ldx     regsave+1
;
; c++;
;
	.dbg	line, "sheep.c", 220
	lda     L027F
	ldx     L027F+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L02AE
	inx
L02AE:	sta     L027F
	stx     L027F+1
	lda     regsave
	ldx     regsave+1
;
; for ( j=db_x;j<w;j++) {
;
	.dbg	line, "sheep.c", 216
	lda     L0274
	ldx     L0274+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L02A6
	inx
L02A6:	sta     L0274
	stx     L0274+1
	lda     regsave
	ldx     regsave+1
	jmp     L029E
;
; db_ch=ptr[1];
;
	.dbg	line, "sheep.c", 222
L029F:	lda     L027B
	ldx     L027B+1
	ldy     #$03
	jsr     ldaxidx
	sta     _db_ch
	stx     _db_ch+1
;
; s+=dw;
;
	.dbg	line, "sheep.c", 223
	lda     L0286
	ldx     L0286+1
	clc
	adc     L027C
	sta     L027C
	txa
	adc     L027C+1
	sta     L027C+1
	tax
	lda     L027C
;
; c+=dw;
;
	.dbg	line, "sheep.c", 224
	lda     L0286
	ldx     L0286+1
	clc
	adc     L027F
	sta     L027F
	txa
	adc     L027F+1
	sta     L027F+1
	tax
	lda     L027F
;
; for (i=db_y;i<h;i++) {
;
	.dbg	line, "sheep.c", 215
	lda     L0273
	ldx     L0273+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L029D
	inx
L029D:	sta     L0273
	stx     L0273+1
	lda     regsave
	ldx     regsave+1
	jmp     L0295
;
; }
;
	.dbg	line, "sheep.c", 226
L0296:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ move_player (unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_player: near

	.dbg	func, "move_player", "00", extern, "_move_player"
	.dbg	sym, "x", "00", auto, 2
	.dbg	sym, "y", "00", auto, 0

.segment	"BSS"

L05BE:
	.res	2,$00

.segment	"CODE"

;
; void move_player (word x,word y) {
;
	.dbg	line, "sheep.c", 335
	jsr     pushax
;
; if (jump>1) { 
;
	.dbg	line, "sheep.c", 338
	lda     _jump
	ldx     _jump+1
	cmp     #$02
	txa
	sbc     #$00
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05BF
;
; aid = 0xf3;
;
	.dbg	line, "sheep.c", 340
	ldx     #$00
	lda     #$F3
	sta     L05BE
	stx     L05BE+1
;
; asm("lda %v",aid);        //set sprite data
;
	.dbg	line, "sheep.c", 343
	lda     L05BE
;
; asm ("sta $07f8"); 
;
	.dbg	line, "sheep.c", 344
	sta     $07f8
;
; frame=0;
;
	.dbg	line, "sheep.c", 345
	ldx     #$00
	lda     #$00
	sta     _frame
	stx     _frame+1
;
; anim=0;
;
	.dbg	line, "sheep.c", 346
	ldx     #$00
	lda     #$00
	sta     _anim
	stx     _anim+1
;
; } else {
;
	.dbg	line, "sheep.c", 347
	jmp     L05E6
;
; if (frame==0) {
;
	.dbg	line, "sheep.c", 349
L05BF:	lda     _frame
	ldx     _frame+1
	cpx     #$00
	bne     L05CE
	cmp     #$00
L05CE:	jsr     booleq
	jeq     L05CC
;
; aid = 0xf0;
;
	.dbg	line, "sheep.c", 350
	ldx     #$00
	lda     #$F0
	sta     L05BE
	stx     L05BE+1
;
; if (anim==0) {
;
	.dbg	line, "sheep.c", 354
	lda     _anim
	ldx     _anim+1
	cpx     #$00
	bne     L05D3
	cmp     #$00
L05D3:	jsr     booleq
	jeq     L05D1
;
; asm("lda %v",aid);        //set sprite data
;
	.dbg	line, "sheep.c", 355
	lda     L05BE
;
; asm ("sta $07f8");    
;
	.dbg	line, "sheep.c", 356
	sta     $07f8
;
; anim=1;
;
	.dbg	line, "sheep.c", 357
	ldx     #$00
	lda     #$01
	sta     _anim
	stx     _anim+1
;
; } else {
;
	.dbg	line, "sheep.c", 358
	jmp     L05DF
;
; asm ("inc $07f8");   
;
	.dbg	line, "sheep.c", 359
L05D1:	inc     $07f8
;
; ++anim;
;
	.dbg	line, "sheep.c", 360
	inc     _anim
	bne     L05DE
	inc     _anim+1
L05DE:	lda     _anim
	ldx     _anim+1
;
; if (anim==4) anim=0;
;
	.dbg	line, "sheep.c", 361
	lda     _anim
	ldx     _anim+1
	cpx     #$00
	bne     L05E1
	cmp     #$04
L05E1:	jsr     booleq
	jeq     L05DF
	ldx     #$00
	lda     #$00
	sta     _anim
	stx     _anim+1
;
; frame=6;
;
	.dbg	line, "sheep.c", 364
L05DF:	ldx     #$00
	lda     #$06
	sta     _frame
	stx     _frame+1
;
; } else --frame;
;
	.dbg	line, "sheep.c", 365
	jmp     L05E6
L05CC:	lda     _frame
	sec
	sbc     #$01
	sta     _frame
	bcs     L05E8
	dec     _frame+1
L05E8:	ldx     _frame+1
;
; *((char *) 0xd015)=1;
;
	.dbg	line, "sheep.c", 376
L05E6:	ldx     #$00
	lda     #$01
	sta     $D015
;
; *((char *) 0xd000)=x;
;
	.dbg	line, "sheep.c", 378
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sta     $D000
;
; *((char *) 0xd001)=y;
;
	.dbg	line, "sheep.c", 379
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $D001
;
; *((char *) 0xd002)=x;
;
	.dbg	line, "sheep.c", 381
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sta     $D002
;
; *((char *) 0xd003)=y;
;
	.dbg	line, "sheep.c", 382
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $D003
;
; *((char *) 0xD01c )=1;
;
	.dbg	line, "sheep.c", 384
	ldx     #$00
	lda     #$01
	sta     $D01C
;
; if (x>255) {
;
	.dbg	line, "sheep.c", 386
	ldy     #$03
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$01
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05FB
;
; *((char *) 0xd010)=1;
;
	.dbg	line, "sheep.c", 387
	ldx     #$00
	lda     #$01
	sta     $D010
;
; else
;
	.dbg	line, "sheep.c", 389
	jmp     L0600
;
; *((char *) 0xd010)=0;
;
	.dbg	line, "sheep.c", 390
L05FB:	ldx     #$00
	lda     #$00
	sta     $D010
;
; }
;
	.dbg	line, "sheep.c", 393
L0600:	jsr     incsp4
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ draw_level (__near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_level: near

	.dbg	func, "draw_level", "00", extern, "_draw_level"
	.dbg	sym, "level", "00", auto, 0

.segment	"BSS"

L060E:
	.res	2,$00
L0618:
	.res	2,$00

.segment	"CODE"

;
; void draw_level (byte *level) {
;
	.dbg	line, "sheep.c", 413
	jsr     pushax
;
; int i=0;
;
	.dbg	line, "sheep.c", 414
	ldx     #$00
	lda     #$00
	sta     L060E
	stx     L060E+1
;
; clrscr();
;
	.dbg	line, "sheep.c", 415
	jsr     _clrscr
;
; drawlevel();
;
	.dbg	line, "sheep.c", 427
	ldy     #$00
	jsr     _drawlevel
;
; while (level[i]!=END) {
;
	.dbg	line, "sheep.c", 428
	jmp     L0614
;
; byte type=level[i++];
;
	.dbg	line, "sheep.c", 429
L0612:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     L060E
	ldx     L060E+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L061B
	inx
L061B:	sta     L060E
	stx     L060E+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	sta     L0618
	stx     L0618+1
;
; db_x=level[i++];
;
	.dbg	line, "sheep.c", 430
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     L060E
	ldx     L060E+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L061F
	inx
L061F:	sta     L060E
	stx     L060E+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	sta     _db_x
	stx     _db_x+1
;
; db_y=level[i++];
;
	.dbg	line, "sheep.c", 431
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     L060E
	ldx     L060E+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0623
	inx
L0623:	sta     L060E
	stx     L060E+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	sta     _db_y
	stx     _db_y+1
;
; db_w=level[i++];
;
	.dbg	line, "sheep.c", 432
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     L060E
	ldx     L060E+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0627
	inx
L0627:	sta     L060E
	stx     L060E+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	sta     _db_w
	stx     _db_w+1
;
; db_h=level[i++];  
;
	.dbg	line, "sheep.c", 433
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     L060E
	ldx     L060E+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L062B
	inx
L062B:	sta     L060E
	stx     L060E+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	sta     _db_h
	stx     _db_h+1
;
; db_cell_color=13;
;
	.dbg	line, "sheep.c", 434
	ldx     #$00
	lda     #$0D
	sta     _db_cell_color
	stx     _db_cell_color+1
;
; db_ch=80;
;
	.dbg	line, "sheep.c", 435
	ldx     #$00
	lda     #$50
	sta     _db_ch
	stx     _db_ch+1
;
; drawbox();
;
	.dbg	line, "sheep.c", 436
	jsr     _drawbox
;
; while (level[i]!=END) {
;
	.dbg	line, "sheep.c", 428
L0614:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     L060E
	ldx     L060E+1
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	cpx     #$00
	bne     L0617
	cmp     #$03
L0617:	jsr     boolne
	jne     L0612
;
; }
;
	.dbg	line, "sheep.c", 440
	jsr     incsp2
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ check_collision (signed short, signed short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_collision: near

	.dbg	func, "check_collision", "00", extern, "_check_collision"
	.dbg	sym, "px", "00", auto, 2
	.dbg	sym, "py", "00", auto, 0

.segment	"BSS"

L0632:
	.res	2,$00
L0635:
	.res	2,$00
L0638:
	.res	2,$00
L063B:
	.res	2,$00

.segment	"CODE"

;
; int check_collision (short px,short py) {
;
	.dbg	line, "sheep.c", 442
	jsr     pushax
;
; short xx=px/8-3;
;
	.dbg	line, "sheep.c", 443
	ldy     #$03
	jsr     ldaxysp
	jsr     asrax3
	sec
	sbc     #$03
	bcs     L0634
	dex
L0634:	sta     L0632
	stx     L0632+1
;
; short yy=py/8-5;
;
	.dbg	line, "sheep.c", 444
	ldy     #$01
	jsr     ldaxysp
	jsr     asrax3
	sec
	sbc     #$05
	bcs     L0637
	dex
L0637:	sta     L0635
	stx     L0635+1
;
; char *s = (char *) lookup[yy]+xx;
;
	.dbg	line, "sheep.c", 447
	lda     L0635
	ldx     L0635+1
	jsr     aslax1
	clc
	adc     #<(_lookup)
	tay
	txa
	adc     #>(_lookup)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	lda     L0632
	ldx     L0632+1
	jsr     tosaddax
	sta     L0638
	stx     L0638+1
;
; char *o=s;
;
	.dbg	line, "sheep.c", 449
	lda     L0638
	ldx     L0638+1
	sta     L063B
	stx     L063B+1
;
; if (xx<0)  return 0;
;
	.dbg	line, "sheep.c", 452
	lda     L0632
	ldx     L0632+1
	cpx     #$80
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L063D
	ldx     #$00
	lda     #$00
	jmp     L0631
;
; if (xx>37) return 0;
;
	.dbg	line, "sheep.c", 453
L063D:	lda     L0632
	ldx     L0632+1
	cmp     #$26
	txa
	sbc     #$00
	bvs     L0642
	eor     #$80
L0642:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0640
	ldx     #$00
	lda     #$00
	jmp     L0631
;
; if (*s>=80)return 1; s++;  
;
	.dbg	line, "sheep.c", 458
L0640:	lda     L0638
	ldx     L0638+1
	ldy     #$00
	jsr     ldauidx
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0644
	ldx     #$00
	lda     #$01
	jmp     L0631
L0644:	lda     L0638
	ldx     L0638+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0648
	inx
L0648:	sta     L0638
	stx     L0638+1
	lda     regsave
	ldx     regsave+1
;
; if (*s>=80)return 1; s++;  
;
	.dbg	line, "sheep.c", 459
	lda     L0638
	ldx     L0638+1
	ldy     #$00
	jsr     ldauidx
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0649
	ldx     #$00
	lda     #$01
	jmp     L0631
L0649:	lda     L0638
	ldx     L0638+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L064D
	inx
L064D:	sta     L0638
	stx     L0638+1
	lda     regsave
	ldx     regsave+1
;
; if (*s>=80) return 1;
;
	.dbg	line, "sheep.c", 460
	lda     L0638
	ldx     L0638+1
	ldy     #$00
	jsr     ldauidx
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L064E
	ldx     #$00
	lda     #$01
	jmp     L0631
;
; s=o+40;
;
	.dbg	line, "sheep.c", 462
L064E:	lda     L063B
	ldx     L063B+1
	clc
	adc     #$28
	bcc     L0653
	inx
L0653:	sta     L0638
	stx     L0638+1
;
; if (*s>=80)return 1; s++;  
;
	.dbg	line, "sheep.c", 464
	lda     L0638
	ldx     L0638+1
	ldy     #$00
	jsr     ldauidx
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0654
	ldx     #$00
	lda     #$01
	jmp     L0631
L0654:	lda     L0638
	ldx     L0638+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0658
	inx
L0658:	sta     L0638
	stx     L0638+1
	lda     regsave
	ldx     regsave+1
;
; if (*s>=80)return 1; s++;  
;
	.dbg	line, "sheep.c", 465
	lda     L0638
	ldx     L0638+1
	ldy     #$00
	jsr     ldauidx
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0659
	ldx     #$00
	lda     #$01
	jmp     L0631
L0659:	lda     L0638
	ldx     L0638+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L065D
	inx
L065D:	sta     L0638
	stx     L0638+1
	lda     regsave
	ldx     regsave+1
;
; if (*s>=80) return 1;
;
	.dbg	line, "sheep.c", 466
	lda     L0638
	ldx     L0638+1
	ldy     #$00
	jsr     ldauidx
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L065E
	ldx     #$00
	lda     #$01
	jmp     L0631
;
; return 0;
;
	.dbg	line, "sheep.c", 481
L065E:	ldx     #$00
	lda     #$00
	jmp     L0631
;
; }
;
	.dbg	line, "sheep.c", 483
L0631:	jsr     incsp4
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ screen_on (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_on: near

	.dbg	func, "screen_on", "00", extern, "_screen_on"

.segment	"CODE"

;
; asm ("sei");
;
	.dbg	line, "sheep.c", 499
	sei
;
; asm ("LDA $D011");
;
	.dbg	line, "sheep.c", 500
	lda     $D011
;
; asm ("ora #16");
;
	.dbg	line, "sheep.c", 501
	ora     #16
;
; asm ("STA $D011");
;
	.dbg	line, "sheep.c", 502
	sta     $D011
;
; asm ("cli");
;
	.dbg	line, "sheep.c", 503
	cli
;
; }
;
	.dbg	line, "sheep.c", 504
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ screen_off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_off: near

	.dbg	func, "screen_off", "00", extern, "_screen_off"

.segment	"CODE"

;
; asm ("sei");
;
	.dbg	line, "sheep.c", 506
	sei
;
; asm ("LDA $D011");
;
	.dbg	line, "sheep.c", 507
	lda     $D011
;
; asm ("and #$ef");
;
	.dbg	line, "sheep.c", 508
	and     #$ef
;
; asm ("STA $D011");
;
	.dbg	line, "sheep.c", 509
	sta     $D011
;
; asm ("cli");
;
	.dbg	line, "sheep.c", 510
	cli
;
; }
;
	.dbg	line, "sheep.c", 511
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ show_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title: near

	.dbg	func, "show_title", "00", extern, "_show_title"

.segment	"BSS"

L087D:
	.res	2,$00
L087E:
	.res	2,$00
L0880:
	.res	2,$00

.segment	"CODE"

;
; word j,w=64+24,i;
;
	.dbg	line, "sheep.c", 516
	ldx     #$00
	lda     #$58
	sta     L087E
	stx     L087E+1
;
; musicid=1;
;
	.dbg	line, "sheep.c", 517
	ldx     #$00
	lda     #$01
	sta     _musicid
	stx     _musicid+1
;
; rastermode=1;
;
	.dbg	line, "sheep.c", 518
	ldx     #$00
	lda     #$01
	sta     _rastermode
	stx     _rastermode+1
;
; for (j=0;j<512;j++) {
;
	.dbg	line, "sheep.c", 519
	ldx     #$00
	lda     #$00
	sta     L087D
	stx     L087D+1
L0885:	lda     L087D
	ldx     L087D+1
	cpx     #$02
	jsr     boolult
	jne     L0888
	jmp     L0886
;
; *((char *) 0x3c00+j)=sprite_title[j];  
;
	.dbg	line, "sheep.c", 520
L0888:	lda     L087D
	ldx     L087D+1
	pha
	txa
	clc
	adc     #$3C
	tax
	pla
	jsr     pushax
	lda     #<(_sprite_title)
	ldx     #>(_sprite_title)
	clc
	adc     L087D
	tay
	txa
	adc     L087D+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=0;j<512;j++) {
;
	.dbg	line, "sheep.c", 519
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L088D
	inx
L088D:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	jmp     L0885
;
; *((char *) 0xd020)=11;
;
	.dbg	line, "sheep.c", 523
L0886:	ldx     #$00
	lda     #$0B
	sta     $D020
;
; *((char *) 0xd021)=11;
;
	.dbg	line, "sheep.c", 524
	ldx     #$00
	lda     #$0B
	sta     $D021
;
; *((char *) 0xd025)=8;
;
	.dbg	line, "sheep.c", 526
	ldx     #$00
	lda     #$08
	sta     $D025
;
; *((char *) 0xd026)=10;
;
	.dbg	line, "sheep.c", 527
	ldx     #$00
	lda     #$0A
	sta     $D026
;
; for (j=0;j<8;j++) {
;
	.dbg	line, "sheep.c", 529
	ldx     #$00
	lda     #$00
	sta     L087D
	stx     L087D+1
L089E:	lda     L087D
	ldx     L087D+1
	cpx     #$00
	bne     L08A5
	cmp     #$08
L08A5:	jsr     boolult
	jne     L08A1
	jmp     L089F
;
; *((char *) 0xd000+j*2)=w;
;
	.dbg	line, "sheep.c", 530
L08A1:	lda     L087D
	ldx     L087D+1
	jsr     shlax1
	pha
	txa
	clc
	adc     #$D0
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     L087E
	ldy     #$00
	jsr     staspidx
;
; *((char *) 0xd000+j*2+1)=70;
;
	.dbg	line, "sheep.c", 531
	lda     L087D
	ldx     L087D+1
	jsr     shlax1
	pha
	txa
	clc
	adc     #$D0
	tax
	pla
	clc
	adc     #$01
	bcc     L08AD
	inx
L08AD:	jsr     pushax
	ldx     #$00
	lda     #$46
	ldy     #$00
	jsr     staspidx
;
; *((char *) 0xD027+j)=5;  
;
	.dbg	line, "sheep.c", 533
	lda     L087D
	ldx     L087D+1
	clc
	adc     #$27
	pha
	txa
	adc     #$D0
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$05
	ldy     #$00
	jsr     staspidx
;
; *((char *) 0x07f8+j)=0xf0+j;
;
	.dbg	line, "sheep.c", 534
	lda     L087D
	ldx     L087D+1
	clc
	adc     #$F8
	pha
	txa
	adc     #$07
	tax
	pla
	jsr     pushax
	lda     L087D
	ldx     L087D+1
	clc
	adc     #$F0
	bcc     L08B5
	inx
L08B5:	ldx     #$00
	ldy     #$00
	jsr     staspidx
;
; if (w>255)  *((char *) 0xd010)|=bits[j];
;
	.dbg	line, "sheep.c", 536
	lda     L087E
	ldx     L087E+1
	cmp     #$00
	txa
	sbc     #$01
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L08B6
	ldx     #$00
	lda     $D010
	jsr     pushax
	lda     L087D
	ldx     L087D+1
	jsr     aslax1
	clc
	adc     #<(_bits)
	tay
	txa
	adc     #>(_bits)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     tosorax
	sta     $D010
;
; w=w+24;
;
	.dbg	line, "sheep.c", 538
L08B6:	lda     L087E
	ldx     L087E+1
	clc
	adc     #$18
	bcc     L08BE
	inx
L08BE:	sta     L087E
	stx     L087E+1
;
; for (j=0;j<8;j++) {
;
	.dbg	line, "sheep.c", 529
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08A7
	inx
L08A7:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	jmp     L089E
;
; *((char *) 0xD01c)=0xff;
;
	.dbg	line, "sheep.c", 542
L089F:	ldx     #$00
	lda     #$FF
	sta     $D01C
;
; *((char *) 0xd015)=0xff;
;
	.dbg	line, "sheep.c", 543
	ldx     #$00
	lda     #$FF
	sta     $D015
;
; j= 9;
;
	.dbg	line, "sheep.c", 547
	ldx     #$00
	lda     #$09
	sta     L087D
	stx     L087D+1
;
; w=7;
;
	.dbg	line, "sheep.c", 548
	ldx     #$00
	lda     #$07
	sta     L087E
	stx     L087E+1
;
; textcolor(7);
;
	.dbg	line, "sheep.c", 549
	lda     #$07
	jsr     _textcolor
;
; gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 550
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08CF
	inx
L08CF:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; cprintf ("code by");
;
	.dbg	line, "sheep.c", 551
	lda     #<(L08D1)
	ldx     #>(L08D1)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; textcolor(3);
;
	.dbg	line, "sheep.c", 552
	lda     #$03
	jsr     _textcolor
;
; w=16;
;
	.dbg	line, "sheep.c", 553
	ldx     #$00
	lda     #$10
	sta     L087E
	stx     L087E+1
;
; gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 554
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08DB
	inx
L08DB:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; cprintf ("raffaele formato");
;
	.dbg	line, "sheep.c", 555
	lda     #<(L08DD)
	ldx     #>(L08DD)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; j++;
;
	.dbg	line, "sheep.c", 557
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08E0
	inx
L08E0:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
;
; w=10;gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 559
	ldx     #$00
	lda     #$0A
	sta     L087E
	stx     L087E+1
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08E7
	inx
L08E7:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; textcolor(7);
;
	.dbg	line, "sheep.c", 560
	lda     #$07
	jsr     _textcolor
;
; cprintf ("artwork by");
;
	.dbg	line, "sheep.c", 561
	lda     #<(L08EB)
	ldx     #>(L08EB)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; w=15;gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 562
	ldx     #$00
	lda     #$0F
	sta     L087E
	stx     L087E+1
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08F3
	inx
L08F3:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; textcolor(3);
;
	.dbg	line, "sheep.c", 563
	lda     #$03
	jsr     _textcolor
;
; cprintf ("federico sesler");
;
	.dbg	line, "sheep.c", 564
	lda     #<(L08F7)
	ldx     #>(L08F7)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; j++;
;
	.dbg	line, "sheep.c", 566
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08FA
	inx
L08FA:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
;
; w=8;gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 568
	ldx     #$00
	lda     #$08
	sta     L087E
	stx     L087E+1
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0901
	inx
L0901:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; textcolor(7);
;
	.dbg	line, "sheep.c", 569
	lda     #$07
	jsr     _textcolor
;
; cprintf ("music by");
;
	.dbg	line, "sheep.c", 570
	lda     #<(L0905)
	ldx     #>(L0905)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; w=15;gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 571
	ldx     #$00
	lda     #$0F
	sta     L087E
	stx     L087E+1
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L090D
	inx
L090D:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; textcolor(3);
;
	.dbg	line, "sheep.c", 572
	lda     #$03
	jsr     _textcolor
;
; cprintf ("michael zuurman");
;
	.dbg	line, "sheep.c", 573
	lda     #<(L0911)
	ldx     #>(L0911)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; j++;
;
	.dbg	line, "sheep.c", 576
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0914
	inx
L0914:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
;
; j++;
;
	.dbg	line, "sheep.c", 577
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0916
	inx
L0916:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
;
; w=11;gotoxy ((40-w)/2,j++);
;
	.dbg	line, "sheep.c", 578
	ldx     #$00
	lda     #$0B
	sta     L087E
	stx     L087E+1
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	ldx     L087D+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L091D
	inx
L091D:	sta     L087D
	stx     L087D+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	jsr     _gotoxy
;
; textcolor(5);
;
	.dbg	line, "sheep.c", 579
	lda     #$05
	jsr     _textcolor
;
; cprintf ("[@] in 2017");
;
	.dbg	line, "sheep.c", 580
	lda     #<(L0921)
	ldx     #>(L0921)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; j+=3;
;
	.dbg	line, "sheep.c", 583
	lda     #$03
	clc
	adc     L087D
	sta     L087D
	bcc     L0925
	inc     L087D+1
L0925:	ldx     L087D+1
;
; w=4;
;
	.dbg	line, "sheep.c", 584
	ldx     #$00
	lda     #$04
	sta     L087E
	stx     L087E+1
;
; w=27;gotoxy ((40-w)/2,j);
;
	.dbg	line, "sheep.c", 585
	ldx     #$00
	lda     #$1B
	sta     L087E
	stx     L087E+1
	ldx     #$00
	lda     #$28
	jsr     pushax
	lda     L087E
	ldx     L087E+1
	jsr     tossubax
	jsr     shrax1
	ldx     #$00
	jsr     pusha
	lda     L087D
	jsr     _gotoxy
;
; textcolor(1);
;
	.dbg	line, "sheep.c", 586
	lda     #$01
	jsr     _textcolor
;
; cprintf ("- fire in port 2 to start -");
;
	.dbg	line, "sheep.c", 587
	lda     #<(L0931)
	ldx     #>(L0931)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; screen_on();
;
	.dbg	line, "sheep.c", 589
	jsr     _screen_on
;
; w=0;
;
	.dbg	line, "sheep.c", 590
	ldx     #$00
	lda     #$00
	sta     L087E
	stx     L087E+1
;
; i=joy();   
;
	.dbg	line, "sheep.c", 592
L0936:	lda     #$FF
	sta     $DC00
	lda     $DC00
	eor     #$FF
	ldx     #$00
	sta     L0880
	stx     L0880+1
;
; gotoxy (6,j);
;
	.dbg	line, "sheep.c", 593
	lda     #$06
	jsr     pusha
	lda     L087D
	jsr     _gotoxy
;
; w++;
;
	.dbg	line, "sheep.c", 594
	lda     L087E
	ldx     L087E+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L094C
	inx
L094C:	sta     L087E
	stx     L087E+1
	lda     regsave
	ldx     regsave+1
;
; if (w/4>7 ) w=0;
;
	.dbg	line, "sheep.c", 595
	lda     L087E
	ldx     L087E+1
	jsr     shrax2
	cmp     #$08
	txa
	sbc     #$00
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L094D
	ldx     #$00
	lda     #$00
	sta     L087E
	stx     L087E+1
;
; textcolor(cycle[w/4]);
;
	.dbg	line, "sheep.c", 596
L094D:	lda     L087E
	ldx     L087E+1
	jsr     shrax2
	jsr     aslax1
	clc
	adc     #<(_cycle)
	tay
	txa
	adc     #>(_cycle)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     _textcolor
;
; cprintf ("- fire in port 2 to start -");
;
	.dbg	line, "sheep.c", 598
	lda     #<(L0955)
	ldx     #>(L0955)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; waitvsync();
;
	.dbg	line, "sheep.c", 599
	jsr     _waitvsync
;
; } while (bit(i,16)==0);
;
	.dbg	line, "sheep.c", 600
	lda     L0880
	and     #$10
	cmp     #$00
	jsr     booleq
	jne     L0936
;
; musicid=0;
;
	.dbg	line, "sheep.c", 621
	ldx     #$00
	lda     #$00
	sta     _musicid
	stx     _musicid+1
;
; rastermode=0;
;
	.dbg	line, "sheep.c", 622
	ldx     #$00
	lda     #$00
	sta     _rastermode
	stx     _rastermode+1
;
; screen_off();
;
	.dbg	line, "sheep.c", 623
	jsr     _screen_off
;
; }
;
	.dbg	line, "sheep.c", 624
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"RODATA"

L0988:
	.word	$0000
	.word	$0140
	.word	$0000
L098E:
	.word	$005B
	.word	$009B
	.word	$00DB
L0994:
	.word	$015E
	.word	$0000
	.word	$015E
L099A:
	.byte	$01
	.byte	$02
	.byte	$01

.segment	"BSS"

L0965:
	.res	2,$00
L0967:
	.res	2,$00
L0968:
	.res	2,$00
L096A:
	.res	2,$00
L096C:
	.res	2,$00
L096F:
	.res	2,$00
L0972:
	.res	2,$00
L0973:
	.res	2,$00
L0974:
	.res	2,$00
L0976:
	.res	2,$00
L0977:
	.res	2,$00
L0979:
	.res	2,$00
L097B:
	.res	2,$00
L097D:
	.res	2,$00
L097E:
	.res	2,$00
L0980:
	.res	2,$00
L0982:
	.res	2,$00
L0984:
	.res	2,$00
L0985:
	.res	2,$00
L0986:
	.res	2,$00
L0987:
	.res	6,$00
L098D:
	.res	6,$00
L0993:
	.res	6,$00
L0999:
	.res	3,$00
L099F:
	.res	2,$00

.segment	"CODE"

;
; int counter=0;
;
	.dbg	line, "sheep.c", 627
	ldx     #$00
	lda     #$00
	sta     L0965
	stx     L0965+1
;
; int  power=0;
;
	.dbg	line, "sheep.c", 629
	ldx     #$00
	lda     #$00
	sta     L0968
	stx     L0968+1
;
; int ljmp=0;
;
	.dbg	line, "sheep.c", 630
	ldx     #$00
	lda     #$00
	sta     L096A
	stx     L096A+1
;
; int numj=sizeof (jtab)/sizeof(int);
;
	.dbg	line, "sheep.c", 631
	ldx     #$00
	lda     #$2E
	sta     L096C
	stx     L096C+1
;
; int numjlong=sizeof (jtablong)/sizeof(int);
;
	.dbg	line, "sheep.c", 632
	ldx     #$00
	lda     #$3D
	sta     L096F
	stx     L096F+1
;
; int qi=0,w;
;
	.dbg	line, "sheep.c", 634
	ldx     #$00
	lda     #$00
	sta     L0974
	stx     L0974+1
;
; short nt=0;
;
	.dbg	line, "sheep.c", 635
	ldx     #$00
	lda     #$00
	sta     L0977
	stx     L0977+1
;
; int vel=5;
;
	.dbg	line, "sheep.c", 636
	ldx     #$00
	lda     #$05
	sta     L0979
	stx     L0979+1
;
; int levid=0;
;
	.dbg	line, "sheep.c", 637
	ldx     #$00
	lda     #$00
	sta     L097B
	stx     L097B+1
;
; short q=0;
;
	.dbg	line, "sheep.c", 639
	ldx     #$00
	lda     #$00
	sta     L097E
	stx     L097E+1
;
; short x=0x80;
;
	.dbg	line, "sheep.c", 640
	ldx     #$00
	lda     #$80
	sta     L0980
	stx     L0980+1
;
; short y=0x80;
;
	.dbg	line, "sheep.c", 641
	ldx     #$00
	lda     #$80
	sta     L0982
	stx     L0982+1
;
; short posx[] = {0,320,0};
;
	.dbg	line, "sheep.c", 646
	ldy     #$05
L098C:	lda     L0988,y
	sta     L0987,y
	dey
	bpl     L098C
;
; short posy[] = {8*8+29-2,8*8+29+64-2,8*8+29+128-2};
;
	.dbg	line, "sheep.c", 647
	ldy     #$05
L0992:	lda     L098E,y
	sta     L098D,y
	dey
	bpl     L0992
;
; short ext[] = {350,0,350};
;
	.dbg	line, "sheep.c", 648
	ldy     #$05
L0998:	lda     L0994,y
	sta     L0993,y
	dey
	bpl     L0998
;
; char dir[] = {1,2,1};
;
	.dbg	line, "sheep.c", 649
	ldy     #$02
L099E:	lda     L099A,y
	sta     L0999,y
	dey
	bpl     L099E
;
; int kill=10;
;
	.dbg	line, "sheep.c", 652
	ldx     #$00
	lda     #$0A
	sta     L099F
	stx     L099F+1
;
; screen_off();
;
	.dbg	line, "sheep.c", 654
	jsr     _screen_off
;
; clrscr();
;
	.dbg	line, "sheep.c", 655
	jsr     _clrscr
;
; x0=10; x1=50;
;
	.dbg	line, "sheep.c", 656
	ldx     #$00
	lda     #$0A
	sta     _x0
	stx     _x0+1
	ldx     #$00
	lda     #$32
	sta     _x1
	stx     _x1+1
;
; for (j=0;j<sizeof (charset);j++) {
;
	.dbg	line, "sheep.c", 683
	ldx     #$00
	lda     #$00
	sta     L0972
	stx     L0972+1
L09A7:	lda     L0972
	ldx     L0972+1
	cpx     #$03
	bne     L09AF
	cmp     #$E8
L09AF:	jsr     boolult
	jne     L09AA
	jmp     L09A8
;
; *((char *) 0x3800+j)=charset[j] ;
;
	.dbg	line, "sheep.c", 685
L09AA:	lda     L0972
	ldx     L0972+1
	pha
	txa
	clc
	adc     #$38
	tax
	pla
	jsr     pushax
	lda     L0972
	ldx     L0972+1
	jsr     aslax1
	clc
	adc     #<(_charset)
	tay
	txa
	adc     #>(_charset)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=0;j<sizeof (charset);j++) {
;
	.dbg	line, "sheep.c", 683
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09B1
	inx
L09B1:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	jmp     L09A7
;
; for (j=60*8,i=0;j<62*8;j++,i++) {
;
	.dbg	line, "sheep.c", 688
L09A8:	ldx     #$01
	lda     #$E0
	sta     L0972
	stx     L0972+1
	ldx     #$00
	lda     #$00
	sta     L0973
	stx     L0973+1
L09B6:	lda     L0972
	ldx     L0972+1
	cpx     #$01
	bne     L09BF
	cmp     #$F0
L09BF:	jsr     boolult
	jne     L09B9
	jmp     L09B7
;
; *((char *) 0x3800+i+80*8)=charset[j] ;
;
	.dbg	line, "sheep.c", 690
L09B9:	lda     L0973
	ldx     L0973+1
	pha
	txa
	clc
	adc     #$38
	tax
	pla
	clc
	adc     #$80
	bcc     L09C6
	inx
L09C6:	inx
	inx
	jsr     pushax
	lda     L0972
	ldx     L0972+1
	jsr     aslax1
	clc
	adc     #<(_charset)
	tay
	txa
	adc     #>(_charset)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=60*8,i=0;j<62*8;j++,i++) {
;
	.dbg	line, "sheep.c", 688
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09C1
	inx
L09C1:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	lda     L0973
	ldx     L0973+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09C3
	inx
L09C3:	sta     L0973
	stx     L0973+1
	lda     regsave
	ldx     regsave+1
	jmp     L09B6
;
; for (j=44*8,i=0;j<59*8;j++,i++) {
;
	.dbg	line, "sheep.c", 693
L09B7:	ldx     #$01
	lda     #$60
	sta     L0972
	stx     L0972+1
	ldx     #$00
	lda     #$00
	sta     L0973
	stx     L0973+1
L09C9:	lda     L0972
	ldx     L0972+1
	cpx     #$01
	bne     L09D2
	cmp     #$D8
L09D2:	jsr     boolult
	jne     L09CC
	jmp     L09CA
;
; *((char *) 0x3800+i+60*8)=charset[j] ;
;
	.dbg	line, "sheep.c", 695
L09CC:	lda     L0973
	ldx     L0973+1
	pha
	txa
	clc
	adc     #$38
	tax
	pla
	clc
	adc     #$E0
	bcc     L09D9
	inx
L09D9:	inx
	jsr     pushax
	lda     L0972
	ldx     L0972+1
	jsr     aslax1
	clc
	adc     #<(_charset)
	tay
	txa
	adc     #>(_charset)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=44*8,i=0;j<59*8;j++,i++) {
;
	.dbg	line, "sheep.c", 693
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09D4
	inx
L09D4:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	lda     L0973
	ldx     L0973+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09D6
	inx
L09D6:	sta     L0973
	stx     L0973+1
	lda     regsave
	ldx     regsave+1
	jmp     L09C9
;
; for (j=48*8;j<49*8+9*8;j++) {
;
	.dbg	line, "sheep.c", 699
L09CA:	ldx     #$01
	lda     #$80
	sta     L0972
	stx     L0972+1
L09DC:	lda     L0972
	ldx     L0972+1
	cpx     #$01
	bne     L09E3
	cmp     #$D0
L09E3:	jsr     boolult
	jne     L09DF
	jmp     L09DD
;
; *((char *) 0x3800+j)=charset[j-15*8] ;
;
	.dbg	line, "sheep.c", 701
L09DF:	lda     L0972
	ldx     L0972+1
	pha
	txa
	clc
	adc     #$38
	tax
	pla
	jsr     pushax
	lda     L0972
	ldx     L0972+1
	sec
	sbc     #$78
	bcs     L09EA
	dex
L09EA:	jsr     aslax1
	clc
	adc     #<(_charset)
	tay
	txa
	adc     #>(_charset)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=48*8;j<49*8+9*8;j++) {
;
	.dbg	line, "sheep.c", 699
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09E5
	inx
L09E5:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	jmp     L09DC
;
; for (j=31*8,i=0;j<32*8;j++,i++) {
;
	.dbg	line, "sheep.c", 706
L09DD:	ldx     #$00
	lda     #$F8
	sta     L0972
	stx     L0972+1
	ldx     #$00
	lda     #$00
	sta     L0973
	stx     L0973+1
L09EB:	lda     L0972
	ldx     L0972+1
	cpx     #$01
	jsr     boolult
	jne     L09EE
	jmp     L09EC
;
; *((char *) 0x3800+i+45*8)=charset[j] ;
;
	.dbg	line, "sheep.c", 708
L09EE:	lda     L0973
	ldx     L0973+1
	pha
	txa
	clc
	adc     #$38
	tax
	pla
	clc
	adc     #$68
	bcc     L09FA
	inx
L09FA:	inx
	jsr     pushax
	lda     L0972
	ldx     L0972+1
	jsr     aslax1
	clc
	adc     #<(_charset)
	tay
	txa
	adc     #>(_charset)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=31*8,i=0;j<32*8;j++,i++) {
;
	.dbg	line, "sheep.c", 706
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09F5
	inx
L09F5:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	lda     L0973
	ldx     L0973+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L09F7
	inx
L09F7:	sta     L0973
	stx     L0973+1
	lda     regsave
	ldx     regsave+1
	jmp     L09EB
;
; poke (53272,21);
;
	.dbg	line, "sheep.c", 718
L09EC:	ldx     #$00
	lda     #$15
	sta     $D018
;
; asm ("lda #$1e");//      ;charset at $3800
;
	.dbg	line, "sheep.c", 722
	lda     #$1e
;
; asm ("sta $d018");
;
	.dbg	line, "sheep.c", 723
	sta     $d018
;
; init_raster();
;
	.dbg	line, "sheep.c", 726
	ldy     #$00
	jsr     _init_raster
;
; show_title();
;
	.dbg	line, "sheep.c", 727
	jsr     _show_title
;
; screen_off();
;
	.dbg	line, "sheep.c", 728
	jsr     _screen_off
;
; asm("lda #200"); 
;
	.dbg	line, "sheep.c", 730
	lda     #200
;
; asm("ora #16");
;
	.dbg	line, "sheep.c", 731
	ora     #16
;
; asm ("sta $d016");
;
	.dbg	line, "sheep.c", 732
	sta     $d016
;
; for (j=0;j<255;j++) {
;
	.dbg	line, "sheep.c", 734
	ldx     #$00
	lda     #$00
	sta     L0972
	stx     L0972+1
L0A0D:	lda     L0972
	ldx     L0972+1
	cpx     #$00
	bne     L0A14
	cmp     #$FF
L0A14:	jsr     boolult
	jne     L0A10
	jmp     L0A0E
;
; *((char *) 0x3c00+j)=data[j];
;
	.dbg	line, "sheep.c", 735
L0A10:	lda     L0972
	ldx     L0972+1
	pha
	txa
	clc
	adc     #$3C
	tax
	pla
	jsr     pushax
	lda     #<(_data)
	ldx     #>(_data)
	clc
	adc     L0972
	tay
	txa
	adc     L0972+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=0;j<255;j++) {
;
	.dbg	line, "sheep.c", 734
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A16
	inx
L0A16:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	jmp     L0A0D
;
; asm("lda #$01");
;
	.dbg	line, "sheep.c", 738
L0A0E:	lda     #$01
;
; asm ("sta $d015");
;
	.dbg	line, "sheep.c", 739
	sta     $d015
;
; asm("lda #$80");
;
	.dbg	line, "sheep.c", 740
	lda     #$80
;
; asm ("sta $d000");
;
	.dbg	line, "sheep.c", 741
	sta     $d000
;
; asm("sta $d001");
;
	.dbg	line, "sheep.c", 742
	sta     $d001
;
; draw_level(levels[levid]);
;
	.dbg	line, "sheep.c", 747
	lda     L097B
	ldx     L097B+1
	jsr     aslax1
	clc
	adc     #<(_levels)
	tay
	txa
	adc     #>(_levels)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _draw_level
;
; x=posx[floor];
;
	.dbg	line, "sheep.c", 749
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0987)
	tay
	txa
	adc     #>(L0987)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0980
	stx     L0980+1
;
; y=posy[floor];
;
	.dbg	line, "sheep.c", 750
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L098D)
	tay
	txa
	adc     #>(L098D)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0982
	stx     L0982+1
;
; d=dir[floor];
;
	.dbg	line, "sheep.c", 751
	lda     #<(L0999)
	ldx     #>(L0999)
	clc
	adc     _floor
	tay
	txa
	adc     _floor+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldx     #$00
	sta     L0984
	stx     L0984+1
;
; e=ext[floor];
;
	.dbg	line, "sheep.c", 752
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0993)
	tay
	txa
	adc     #>(L0993)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0985
	stx     L0985+1
;
; *((char *) 0xd025)=0;
;
	.dbg	line, "sheep.c", 764
	ldx     #$00
	lda     #$00
	sta     $D025
;
; *((char *) 0xd026)=1;
;
	.dbg	line, "sheep.c", 765
	ldx     #$00
	lda     #$01
	sta     $D026
;
; *((char *) 0xd027)=12; 
;
	.dbg	line, "sheep.c", 766
	ldx     #$00
	lda     #$0C
	sta     $D027
;
; *((char *) 0xd028)=0;
;
	.dbg	line, "sheep.c", 767
	ldx     #$00
	lda     #$00
	sta     $D028
;
; flip_h();
;
	.dbg	line, "sheep.c", 769
	ldy     #$00
	jsr     _flip_h
;
; screen_on();
;
	.dbg	line, "sheep.c", 771
	jsr     _screen_on
;
; while(1) {
;
	.dbg	line, "sheep.c", 774
L0A42:	jmp     L0A45
;
; j=joy(); 
;
	.dbg	line, "sheep.c", 776
L0A43:	lda     #$FF
	sta     $DC00
	lda     $DC00
	eor     #$FF
	ldx     #$00
	sta     L0972
	stx     L0972+1
;
; if (d==1) {x++;if (x==e) newfloor=1;}
;
	.dbg	line, "sheep.c", 778
	lda     L0984
	ldx     L0984+1
	cpx     #$00
	bne     L0A58
	cmp     #$01
L0A58:	jsr     booleq
	jeq     L0A56
	lda     L0980
	ldx     L0980+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A5A
	inx
L0A5A:	sta     L0980
	stx     L0980+1
	lda     regsave
	ldx     regsave+1
	lda     L0980
	ldx     L0980+1
	jsr     pushax
	lda     L0985
	ldx     L0985+1
	jsr     toseqax
	jeq     L0A5B
	ldx     #$00
	lda     #$01
	sta     _newfloor
	stx     _newfloor+1
;
; else if (d==2) {x--; if (x==e)newfloor=1;}
;
	.dbg	line, "sheep.c", 779
L0A5B:	jmp     L0A65
L0A56:	lda     L0984
	ldx     L0984+1
	cpx     #$00
	bne     L0A62
	cmp     #$02
L0A62:	jsr     booleq
	jeq     L0A65
	lda     L0980
	ldx     L0980+1
	sta     regsave
	stx     regsave+1
	sec
	sbc     #$01
	bcs     L0A64
	dex
L0A64:	sta     L0980
	stx     L0980+1
	lda     regsave
	ldx     regsave+1
	lda     L0980
	ldx     L0980+1
	jsr     pushax
	lda     L0985
	ldx     L0985+1
	jsr     toseqax
	jeq     L0A65
	ldx     #$00
	lda     #$01
	sta     _newfloor
	stx     _newfloor+1
;
; qi=q/256;
;
	.dbg	line, "sheep.c", 781
L0A65:	lda     L097E
	ldx     L097E+1
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0A6B
	dex
L0A6B:	sta     L0974
	stx     L0974+1
;
; if (newfloor==1) {
;
	.dbg	line, "sheep.c", 782
	lda     _newfloor
	ldx     _newfloor+1
	cpx     #$00
	bne     L0A6E
	cmp     #$01
L0A6E:	jsr     booleq
	jeq     L0A6C
;
; ++floor;  
;
	.dbg	line, "sheep.c", 783
	inc     _floor
	bne     L0A70
	inc     _floor+1
L0A70:	lda     _floor
	ldx     _floor+1
;
; if (floor>2) {
;
	.dbg	line, "sheep.c", 784
	lda     _floor
	ldx     _floor+1
	cmp     #$03
	txa
	sbc     #$00
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0A71
;
; floor=0;
;
	.dbg	line, "sheep.c", 785
	ldx     #$00
	lda     #$00
	sta     _floor
	stx     _floor+1
;
; levid++;
;
	.dbg	line, "sheep.c", 786
	lda     L097B
	ldx     L097B+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A76
	inx
L0A76:	sta     L097B
	stx     L097B+1
	lda     regsave
	ldx     regsave+1
;
; if (levels[levid]==0) {
;
	.dbg	line, "sheep.c", 788
	lda     L097B
	ldx     L097B+1
	jsr     aslax1
	clc
	adc     #<(_levels)
	tay
	txa
	adc     #>(_levels)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	cpx     #$00
	bne     L0A7A
	cmp     #$00
L0A7A:	jsr     booleq
	jeq     L0A77
;
; break;
;
	.dbg	line, "sheep.c", 789
	jmp     L0A44
;
; if (levid%4==0) {
;
	.dbg	line, "sheep.c", 791
L0A77:	lda     L097B
	ldx     L097B+1
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     tosmodax
	cpx     #$00
	bne     L0A7D
	cmp     #$00
L0A7D:	jsr     booleq
	jeq     L0A7B
;
; clrscr();         
;
	.dbg	line, "sheep.c", 792
	jsr     _clrscr
;
; musicid=4;
;
	.dbg	line, "sheep.c", 793
	ldx     #$00
	lda     #$04
	sta     _musicid
	stx     _musicid+1
;
; rastermode=1;
;
	.dbg	line, "sheep.c", 794
	ldx     #$00
	lda     #$01
	sta     _rastermode
	stx     _rastermode+1
;
; gotoxy (13,10);
;
	.dbg	line, "sheep.c", 795
	lda     #$0D
	jsr     pusha
	lda     #$0A
	jsr     _gotoxy
;
; cprintf ("level complete");     
;
	.dbg	line, "sheep.c", 796
	lda     #<(L0A87)
	ldx     #>(L0A87)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; waitjingle();
;
	.dbg	line, "sheep.c", 797
	ldy     #$00
	jsr     _waitjingle
;
; draw_level(levels[levid]); 
;
	.dbg	line, "sheep.c", 800
L0A7B:	lda     L097B
	ldx     L097B+1
	jsr     aslax1
	clc
	adc     #<(_levels)
	tay
	txa
	adc     #>(_levels)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _draw_level
;
; musicid=0;
;
	.dbg	line, "sheep.c", 801
	ldx     #$00
	lda     #$00
	sta     _musicid
	stx     _musicid+1
;
; rastermode=0;
;
	.dbg	line, "sheep.c", 802
	ldx     #$00
	lda     #$00
	sta     _rastermode
	stx     _rastermode+1
;
; } else flip_h();
;
	.dbg	line, "sheep.c", 805
	jmp     L0A91
L0A71:	ldy     #$00
	jsr     _flip_h
;
; x=posx[floor];
;
	.dbg	line, "sheep.c", 807
L0A91:	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0987)
	tay
	txa
	adc     #>(L0987)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0980
	stx     L0980+1
;
; y=posy[floor];
;
	.dbg	line, "sheep.c", 808
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L098D)
	tay
	txa
	adc     #>(L098D)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0982
	stx     L0982+1
;
; d=dir[floor];
;
	.dbg	line, "sheep.c", 809
	lda     #<(L0999)
	ldx     #>(L0999)
	clc
	adc     _floor
	tay
	txa
	adc     _floor+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldx     #$00
	sta     L0984
	stx     L0984+1
;
; e=ext[floor];
;
	.dbg	line, "sheep.c", 810
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0993)
	tay
	txa
	adc     #>(L0993)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0985
	stx     L0985+1
;
; newfloor=0;
;
	.dbg	line, "sheep.c", 811
	ldx     #$00
	lda     #$00
	sta     _newfloor
	stx     _newfloor+1
;
; } else if (check_collision (x,y+qi)==1) {
;
	.dbg	line, "sheep.c", 812
	jmp     L0AB5
L0A6C:	lda     L0980
	ldx     L0980+1
	jsr     pushax
	lda     L0982
	ldx     L0982+1
	jsr     pushax
	lda     L0974
	ldx     L0974+1
	jsr     tosaddax
	jsr     _check_collision
	cpx     #$00
	bne     L0AA6
	cmp     #$01
L0AA6:	jsr     booleq
	jeq     L0AB5
;
; x=posx[floor];
;
	.dbg	line, "sheep.c", 813
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0987)
	tay
	txa
	adc     #>(L0987)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0980
	stx     L0980+1
;
; y=posy[floor];
;
	.dbg	line, "sheep.c", 814
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L098D)
	tay
	txa
	adc     #>(L098D)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0982
	stx     L0982+1
;
; d=dir[floor];
;
	.dbg	line, "sheep.c", 815
	lda     #<(L0999)
	ldx     #>(L0999)
	clc
	adc     _floor
	tay
	txa
	adc     _floor+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldx     #$00
	sta     L0984
	stx     L0984+1
;
; e=ext[floor];
;
	.dbg	line, "sheep.c", 816
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0993)
	tay
	txa
	adc     #>(L0993)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0985
	stx     L0985+1
;
; kill--;
;
	.dbg	line, "sheep.c", 817
	lda     L099F
	ldx     L099F+1
	sta     regsave
	stx     regsave+1
	sec
	sbc     #$01
	bcs     L0AB4
	dex
L0AB4:	sta     L099F
	stx     L099F+1
	lda     regsave
	ldx     regsave+1
;
; if (kill==0)
;
	.dbg	line, "sheep.c", 818
	lda     L099F
	ldx     L099F+1
	cpx     #$00
	bne     L0AB7
	cmp     #$00
L0AB7:	jsr     booleq
	jeq     L0AB5
;
; break;
;
	.dbg	line, "sheep.c", 819
	jmp     L0A44
;
; if (jump==0 && bit(j,16)) {
;
	.dbg	line, "sheep.c", 822
L0AB5:	lda     _jump
	ldx     _jump+1
	cpx     #$00
	bne     L0ABA
	cmp     #$00
L0ABA:	jsr     booleq
	jeq     L0ABB
	lda     L0972
	and     #$10
	tax
	jne     L0AB9
L0ABB:	ldx     #$00
	lda     #$00
	jeq     L0AC2
L0AB9:	ldx     #$00
	lda     #$01
L0AC2:	jeq     L0AB8
;
; jump=1;
;
	.dbg	line, "sheep.c", 823
	ldx     #$00
	lda     #$01
	sta     _jump
	stx     _jump+1
;
; q=0;
;
	.dbg	line, "sheep.c", 824
	ldx     #$00
	lda     #$00
	sta     L097E
	stx     L097E+1
;
; qi=0;
;
	.dbg	line, "sheep.c", 825
	ldx     #$00
	lda     #$00
	sta     L0974
	stx     L0974+1
;
; nt=0;
;
	.dbg	line, "sheep.c", 826
	ldx     #$00
	lda     #$00
	sta     L0977
	stx     L0977+1
;
; frame=1;
;
	.dbg	line, "sheep.c", 827
	ldx     #$00
	lda     #$01
	sta     _frame
	stx     _frame+1
;
; anim=0;
;
	.dbg	line, "sheep.c", 828
	ldx     #$00
	lda     #$00
	sta     _anim
	stx     _anim+1
;
; power=0;
;
	.dbg	line, "sheep.c", 829
	ldx     #$00
	lda     #$00
	sta     L0968
	stx     L0968+1
;
; if (jump==1) {
;
	.dbg	line, "sheep.c", 831
L0AB8:	lda     _jump
	ldx     _jump+1
	cpx     #$00
	bne     L0AD3
	cmp     #$01
L0AD3:	jsr     booleq
	jeq     L0ADA
;
; power+=51;
;
	.dbg	line, "sheep.c", 832
	lda     #$33
	clc
	adc     L0968
	sta     L0968
	bcc     L0AD6
	inc     L0968+1
L0AD6:	ldx     L0968+1
;
; ljmp=power/256;   
;
	.dbg	line, "sheep.c", 833
	lda     L0968
	ldx     L0968+1
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0AD9
	dex
L0AD9:	sta     L096A
	stx     L096A+1
;
; if (ljmp>=1)  {      
;
	.dbg	line, "sheep.c", 834
	lda     L096A
	ldx     L096A+1
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0ADC
	eor     #$80
L0ADC:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0ADA
;
; ljmp=1;
;
	.dbg	line, "sheep.c", 835
	ldx     #$00
	lda     #$01
	sta     L096A
	stx     L096A+1
;
; jump=2;
;
	.dbg	line, "sheep.c", 836
	ldx     #$00
	lda     #$02
	sta     _jump
	stx     _jump+1
;
; if (jump==1&& bit(j,16)==0) {
;
	.dbg	line, "sheep.c", 839
L0ADA:	lda     _jump
	ldx     _jump+1
	cpx     #$00
	bne     L0AE3
	cmp     #$01
L0AE3:	jsr     booleq
	jeq     L0AE4
	lda     L0972
	and     #$10
	cmp     #$00
	jsr     booleq
	jne     L0AE2
L0AE4:	ldx     #$00
	lda     #$00
	jeq     L0AEB
L0AE2:	ldx     #$00
	lda     #$01
L0AEB:	jeq     L0AE1
;
; jump=2;   
;
	.dbg	line, "sheep.c", 840
	ldx     #$00
	lda     #$02
	sta     _jump
	stx     _jump+1
;
; if (jump>1) {
;
	.dbg	line, "sheep.c", 843
L0AE1:	lda     _jump
	ldx     _jump+1
	cmp     #$02
	txa
	sbc     #$00
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0B00
;
; if (ljmp==0) {
;
	.dbg	line, "sheep.c", 844
	lda     L096A
	ldx     L096A+1
	cpx     #$00
	bne     L0AF2
	cmp     #$00
L0AF2:	jsr     booleq
	jeq     L0AF0
;
; q+=jtab[nt++];
;
	.dbg	line, "sheep.c", 845
	lda     L0977
	ldx     L0977+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0AF6
	inx
L0AF6:	sta     L0977
	stx     L0977+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #<(_jtab)
	tay
	txa
	adc     #>(_jtab)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	clc
	adc     L097E
	sta     L097E
	txa
	adc     L097E+1
	sta     L097E+1
	tax
	lda     L097E
;
; if (nt>=numj) {
;
	.dbg	line, "sheep.c", 846
	lda     L0977
	ldx     L0977+1
	jsr     pushax
	lda     L096C
	ldx     L096C+1
	jsr     tosgeax
	jeq     L0AF7
;
; jump=0;
;
	.dbg	line, "sheep.c", 847
	ldx     #$00
	lda     #$00
	sta     _jump
	stx     _jump+1
;
; } else  {
;
	.dbg	line, "sheep.c", 849
L0AF7:	jmp     L0B00
;
; q+=jtablong[nt++];
;
	.dbg	line, "sheep.c", 850
L0AF0:	lda     L0977
	ldx     L0977+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0AFF
	inx
L0AFF:	sta     L0977
	stx     L0977+1
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #<(_jtablong)
	tay
	txa
	adc     #>(_jtablong)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	clc
	adc     L097E
	sta     L097E
	txa
	adc     L097E+1
	sta     L097E+1
	tax
	lda     L097E
;
; if (nt>=numjlong) {
;
	.dbg	line, "sheep.c", 851
	lda     L0977
	ldx     L0977+1
	jsr     pushax
	lda     L096F
	ldx     L096F+1
	jsr     tosgeax
	jeq     L0B00
;
; jump=0;
;
	.dbg	line, "sheep.c", 852
	ldx     #$00
	lda     #$00
	sta     _jump
	stx     _jump+1
;
; qi=q/256;
;
	.dbg	line, "sheep.c", 860
L0B00:	lda     L097E
	ldx     L097E+1
	cpx     #$80
	txa
	ldx     #$00
	bcc     L0B06
	dex
L0B06:	sta     L0974
	stx     L0974+1
;
; if (!frame_ready) {
;
	.dbg	line, "sheep.c", 861
	lda     _frame_ready
	ldx     _frame_ready+1
	jsr     bnegax
	jeq     L0B07
;
; frame_ready=1;
;
	.dbg	line, "sheep.c", 862
	ldx     #$00
	lda     #$01
	sta     _frame_ready
	stx     _frame_ready+1
;
; waitvsync();
;
	.dbg	line, "sheep.c", 863
	jsr     _waitvsync
;
; move_player(x,y+qi);
;
	.dbg	line, "sheep.c", 864
	lda     L0980
	ldx     L0980+1
	jsr     pushax
	lda     L0982
	ldx     L0982+1
	jsr     pushax
	lda     L0974
	ldx     L0974+1
	jsr     tosaddax
	jsr     _move_player
;
; textcolor(1);
;
	.dbg	line, "sheep.c", 871
L0B07:	lda     #$01
	jsr     _textcolor
;
; gotoxy (9,2);   
;
	.dbg	line, "sheep.c", 873
	lda     #$09
	jsr     pusha
	lda     #$02
	jsr     _gotoxy
;
; cprintf ("level %d of 10 lives %d ",levid+1,kill);
;
	.dbg	line, "sheep.c", 874
	lda     #<(L0B15)
	ldx     #>(L0B15)
	jsr     pushax
	lda     L097B
	ldx     L097B+1
	clc
	adc     #$01
	bcc     L0B18
	inx
L0B18:	jsr     pushax
	lda     L099F
	ldx     L099F+1
	jsr     pushax
	ldy     #$06
	jsr     _cprintf
;
; while(1) {
;
	.dbg	line, "sheep.c", 774
L0A45:	jmp     L0A43
;
; *((char *) 0xd015)=0;
;
	.dbg	line, "sheep.c", 879
L0A44:	ldx     #$00
	lda     #$00
	sta     $D015
;
; if (kill==0) {
;
	.dbg	line, "sheep.c", 880
	lda     L099F
	ldx     L099F+1
	cpx     #$00
	bne     L0B1F
	cmp     #$00
L0B1F:	jsr     booleq
	jeq     L0B1D
;
; clrscr();
;
	.dbg	line, "sheep.c", 881
	jsr     _clrscr
;
; gotoxy (5,9);
;
	.dbg	line, "sheep.c", 882
	lda     #$05
	jsr     pusha
	lda     #$09
	jsr     _gotoxy
;
; cprintf ("          you lose          ");
;
	.dbg	line, "sheep.c", 883
	lda     #<(L0B25)
	ldx     #>(L0B25)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; textcolor(1);
;
	.dbg	line, "sheep.c", 885
	lda     #$01
	jsr     _textcolor
;
; musicid=3;
;
	.dbg	line, "sheep.c", 886
	ldx     #$00
	lda     #$03
	sta     _musicid
	stx     _musicid+1
;
; rastermode=1;
;
	.dbg	line, "sheep.c", 887
	ldx     #$00
	lda     #$01
	sta     _rastermode
	stx     _rastermode+1
;
; waitjinglewithkey();
;
	.dbg	line, "sheep.c", 889
	ldy     #$00
	jsr     _waitjinglewithkey
;
; w=0;
;
	.dbg	line, "sheep.c", 891
	ldx     #$00
	lda     #$00
	sta     L0976
	stx     L0976+1
;
; show_title();
;
	.dbg	line, "sheep.c", 902
	jsr     _show_title
;
; for (j=0;j<255;j++) {
;
	.dbg	line, "sheep.c", 903
	ldx     #$00
	lda     #$00
	sta     L0972
	stx     L0972+1
L0B31:	lda     L0972
	ldx     L0972+1
	cpx     #$00
	bne     L0B38
	cmp     #$FF
L0B38:	jsr     boolult
	jne     L0B34
	jmp     L0B32
;
; *((char *) 0x3c00+j)=data[j];
;
	.dbg	line, "sheep.c", 904
L0B34:	lda     L0972
	ldx     L0972+1
	pha
	txa
	clc
	adc     #$3C
	tax
	pla
	jsr     pushax
	lda     #<(_data)
	ldx     #>(_data)
	clc
	adc     L0972
	tay
	txa
	adc     L0972+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
;
; for (j=0;j<255;j++) {
;
	.dbg	line, "sheep.c", 903
	lda     L0972
	ldx     L0972+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0B3A
	inx
L0B3A:	sta     L0972
	stx     L0972+1
	lda     regsave
	ldx     regsave+1
	jmp     L0B31
;
; asm("lda #$01");
;
	.dbg	line, "sheep.c", 907
L0B32:	lda     #$01
;
; asm ("sta $d015");
;
	.dbg	line, "sheep.c", 908
	sta     $d015
;
; asm("lda #$80");
;
	.dbg	line, "sheep.c", 909
	lda     #$80
;
; asm ("sta $d000");
;
	.dbg	line, "sheep.c", 910
	sta     $d000
;
; asm("sta $d001"); 
;
	.dbg	line, "sheep.c", 911
	sta     $d001
;
; *((char *) 0xd025)=0;
;
	.dbg	line, "sheep.c", 913
	ldx     #$00
	lda     #$00
	sta     $D025
;
; *((char *) 0xd026)=1;
;
	.dbg	line, "sheep.c", 914
	ldx     #$00
	lda     #$01
	sta     $D026
;
; *((char *) 0xd027)=12; 
;
	.dbg	line, "sheep.c", 915
	ldx     #$00
	lda     #$0C
	sta     $D027
;
; *((char *) 0xd028)=0;
;
	.dbg	line, "sheep.c", 916
	ldx     #$00
	lda     #$00
	sta     $D028
;
; flip_h();
;
	.dbg	line, "sheep.c", 918
	ldy     #$00
	jsr     _flip_h
;
; clrscr();         
;
	.dbg	line, "sheep.c", 921
	jsr     _clrscr
;
; kill=10;
;
	.dbg	line, "sheep.c", 922
	ldx     #$00
	lda     #$0A
	sta     L099F
	stx     L099F+1
;
; levid=0; 
;
	.dbg	line, "sheep.c", 923
	ldx     #$00
	lda     #$00
	sta     L097B
	stx     L097B+1
;
; floor=0;
;
	.dbg	line, "sheep.c", 924
	ldx     #$00
	lda     #$00
	sta     _floor
	stx     _floor+1
;
; x=posx[floor];
;
	.dbg	line, "sheep.c", 926
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0987)
	tay
	txa
	adc     #>(L0987)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0980
	stx     L0980+1
;
; y=posy[floor];
;
	.dbg	line, "sheep.c", 927
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L098D)
	tay
	txa
	adc     #>(L098D)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0982
	stx     L0982+1
;
; d=dir[floor];
;
	.dbg	line, "sheep.c", 928
	lda     #<(L0999)
	ldx     #>(L0999)
	clc
	adc     _floor
	tay
	txa
	adc     _floor+1
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	ldx     #$00
	sta     L0984
	stx     L0984+1
;
; e=ext[floor];
;
	.dbg	line, "sheep.c", 929
	lda     _floor
	ldx     _floor+1
	jsr     aslax1
	clc
	adc     #<(L0993)
	tay
	txa
	adc     #>(L0993)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	sta     L0985
	stx     L0985+1
;
; draw_level(levels[levid]); 
;
	.dbg	line, "sheep.c", 931
	lda     L097B
	ldx     L097B+1
	jsr     aslax1
	clc
	adc     #<(_levels)
	tay
	txa
	adc     #>(_levels)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _draw_level
;
; musicid=0;
;
	.dbg	line, "sheep.c", 932
	ldx     #$00
	lda     #$00
	sta     _musicid
	stx     _musicid+1
;
; rastermode=0;
;
	.dbg	line, "sheep.c", 933
	ldx     #$00
	lda     #$00
	sta     _rastermode
	stx     _rastermode+1
;
; screen_on ();
;
	.dbg	line, "sheep.c", 934
	jsr     _screen_on
;
; goto restart;
;
	.dbg	line, "sheep.c", 935
	jmp     L0A42
;
; } else {
;
	.dbg	line, "sheep.c", 936
	jmp     L0B71
;
; clrscr();
;
	.dbg	line, "sheep.c", 937
L0B1D:	jsr     _clrscr
;
; gotoxy (5,10);
;
	.dbg	line, "sheep.c", 938
	lda     #$05
	jsr     pusha
	lda     #$0A
	jsr     _gotoxy
;
; cprintf ("congratulation you did it!!! ");
;
	.dbg	line, "sheep.c", 939
	lda     #<(L0B77)
	ldx     #>(L0B77)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; gotoxy (11,13);
;
	.dbg	line, "sheep.c", 940
	lda     #$0B
	jsr     pusha
	lda     #$0D
	jsr     _gotoxy
;
; cprintf ("only %03d death ",kill);
;
	.dbg	line, "sheep.c", 941
	lda     #<(L0B7D)
	ldx     #>(L0B7D)
	jsr     pushax
	lda     L099F
	ldx     L099F+1
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
;
; for (;;);
;
	.dbg	line, "sheep.c", 944
L0B71:	jmp     L0B83
L0B82:	jmp     L0B71
L0B83:	jmp     L0B82
;
; return EXIT_SUCCESS;
;
	.dbg	line, "sheep.c", 946
	ldx     #$00
	lda     #$00
	jmp     L0964
;
; }
;
	.dbg	line, "sheep.c", 947
L0964:	rts
	.dbg	line

.endproc

